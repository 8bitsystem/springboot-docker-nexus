pipeline {
    agent any
    environment {
        springBootImageName = "newbuild"
        springBootImageTag = "1.0.${env.BUILD_NUMBER}"
        esImageName = "elasticsearch"
        esImageTag = "7.15.${env.BUILD_NUMBER}"
        fbImageName = "filebeat"
        fbImageTag = "7.15.${env.BUILD_NUMBER}"
        lsImageName = "logstash"
        lsImageTag = "7.15.${env.BUILD_NUMBER}"
        nexusUrl = "192.168.1.41:8082"
        nexusRepository = "docker-hosted"
        nexusrepourl = "http://192.168.1.41:8082/repository/docker-hosted/"
    }

    stages {
        stage('Get Code') {
            steps {
                git branch: 'main', url: 'https://github.com/Lehar1107/nexus_jenkins_docker_springboot.git'
            }
        }
        stage('Build Spring Boot') {
            steps {
                bat 'mvn clean install -DskipTests=true'
            }
        }
        stage('Build Spring Boot Docker Image') {
            steps {
                script {
                    def dockerfile = """
                        FROM openjdk:17-jdk
                        COPY target/springboot-docker-nexus-0.0.1-SNAPSHOT.jar /app/my-spring-boot-app.jar
                        WORKDIR /app
                        ENTRYPOINT ["java", "-jar", "my-spring-boot-app.jar"]
                    """
                    writeFile file: 'Dockerfile', text: dockerfile
                    bat "docker build -t ${springBootImageName}:${springBootImageTag} ."
                    bat "docker image ls ${springBootImageName}:${springBootImageTag}"
                }
            }
        }
        stage('Push Spring Boot Docker Image to Nexus') {
            environment {
                NEXUS_CREDENTIALS = credentials('nexus-user-credentials')
            }
            steps {
                script {
                    def dockerImage = "${springBootImageName}:${springBootImageTag}"
                    def nexusImage = "${nexusUrl}/${nexusRepository}/${springBootImageName}:${springBootImageTag}"
                    withCredentials([usernamePassword(credentialsId: 'nexus-user-credentials', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                        withEnv(["DOCKER_LOGIN=\${NEXUS_USERNAME}", "DOCKER_PASSWORD=\${NEXUS_PASSWORD}"]) {
                            bat "docker login -u $NEXUS_USERNAME -p $NEXUS_PASSWORD $nexusrepourl"
                            bat "docker tag ${dockerImage} ${nexusImage}"
                            bat "docker push ${nexusImage}"
                            bat "docker logout $nexusrepourl"
                        }
                    }
                }
            }
        }
        stage('Build Elasticsearch Docker Image') {
            steps {
                script {
                    def esDockerfile = """
                        FROM docker.elastic.co/elasticsearch/elasticsearch:7.15.0
                        # Any custom modifications to the Elasticsearch image can be added here
                    """
                    writeFile file: 'Dockerfile.elasticsearch', text: esDockerfile
                    bat "docker build -t ${esImageName}:${esImageTag} -f Dockerfile.elasticsearch ."
                    bat "docker image ls ${esImageName}:${esImageTag}"
                }
            }
        }
        stage('Push Elasticsearch Docker Image to Nexus') {
            environment {
                NEXUS_CREDENTIALS = credentials('nexus-user-credentials')
            }
            steps {
                script {
                    def esDockerImage = "${esImageName}:${esImageTag}"
                    def esNexusImage = "${nexusUrl}/${nexusRepository}/${esImageName}:${esImageTag}"
                    withCredentials([usernamePassword(credentialsId: 'nexus-user-credentials', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                        withEnv(["DOCKER_LOGIN=\${NEXUS_USERNAME}", "DOCKER_PASSWORD=\${NEXUS_PASSWORD}"]) {
                            bat "docker login -u $NEXUS_USERNAME -p $NEXUS_PASSWORD $nexusrepourl"
                            bat "docker tag ${esDockerImage} ${esNexusImage}"
                            bat "docker push ${esNexusImage}"
                            bat "docker logout $nexusrepourl"
                        }
                    }
                }
            }
        }
        stage('Build Filebeat Docker Image') {
            steps {
                script {
                    def fbDockerfile = """
                        FROM docker.elastic.co/beats/filebeat:7.15.0
                        # Any custom modifications to the Filebeat image can be added here
                    """
                    writeFile file: 'Dockerfile.filebeat', text: fbDockerfile
                    bat "docker build -t ${fbImageName}:${fbImageTag} -f Dockerfile.filebeat ."
                    bat "docker image ls ${fbImageName}:${fbImageTag}"
                }
            }
        }
        stage('Push Filebeat Docker Image to Nexus') {
            environment {
                NEXUS_CREDENTIALS = credentials('nexus-user-credentials')
            }
            steps {
                script {
                    def fbDockerImage = "${fbImageName}:${fbImageTag}"
                    def fbNexusImage = "${nexusUrl}/${nexusRepository}/${fbImageName}:${fbImageTag}"
                    withCredentials([usernamePassword(credentialsId: 'nexus-user-credentials', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                        withEnv(["DOCKER_LOGIN=\${NEXUS_USERNAME}", "DOCKER_PASSWORD=\${NEXUS_PASSWORD}"]) {
                            bat "docker login -u $NEXUS_USERNAME -p $NEXUS_PASSWORD $nexusrepourl"
                            bat "docker tag ${fbDockerImage} ${fbNexusImage}"
                            bat "docker push ${fbNexusImage}"
                            bat "docker logout $nexusrepourl"
                        }
                    }
                }
            }
        }
        stage('Build logstash Docker Image') {
            steps {
                script {
                    def lsDockerfile = """
                        FROM docker.elastic.co/logstash/logstash:7.15.0
                        # Any custom modifications to the logstash image can be added here
                    """
                    writeFile file: 'Dockerfile.logstash', text: lsDockerfile
                    bat "docker build -t ${lsImageName}:${lsImageTag} -f Dockerfile.logstash ."
                    bat "docker image ls ${lsImageName}:${lsImageTag}"
                }
            }
        }
        stage('Push logstash Docker Image to Nexus') {
            environment {
                NEXUS_CREDENTIALS = credentials('nexus-user-credentials')
            }
            steps {
                script {
                    def lsDockerImage = "${lsImageName}:${lsImageTag}"
                    def lsNexusImage = "${nexusUrl}/${nexusRepository}/${lsImageName}:${lsImageTag}"
                    withCredentials([usernamePassword(credentialsId: 'nexus-user-credentials', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                        withEnv(["DOCKER_LOGIN=\${NEXUS_USERNAME}", "DOCKER_PASSWORD=\${NEXUS_PASSWORD}"]) {
                            bat "docker login -u $NEXUS_USERNAME -p $NEXUS_PASSWORD $nexusrepourl"
                            bat "docker tag ${lsDockerImage} ${lsNexusImage}"
                            bat "docker push ${lsNexusImage}"
                            bat "docker logout $nexusrepourl"
                        }
                    }
                }
            }
        }
        
        stage('Prepare YAMLs') {
            steps {
                script {
                    def elasticYamlContent = readFile('nexus/elastic-playbook.yaml')
                    def filebeatYamlContent = readFile('nexus/filebeat-playbook.yaml')
                    def logstashYamlContent = readFile('nexus/logstash-playbook.yaml')
                    def modifiedElasticContent = elasticYamlContent.replaceAll('\\$\\{BUILD_NUMBER\\}', env.BUILD_NUMBER)
                    def modifiedFilebeatContent = filebeatYamlContent.replaceAll('\\$\\{BUILD_NUMBER\\}', env.BUILD_NUMBER)
                    def modifiedLogstashContent = logstashYamlContent.replaceAll('\\$\\{BUILD_NUMBER\\}', env.BUILD_NUMBER)
                    writeFile file: 'nexus/elastic-playbook.yaml', text: modifiedElasticContent
                    writeFile file: 'nexus/filebeat-playbook.yaml', text: modifiedFilebeatContent
                    writeFile file: 'nexus/logstash-playbook.yaml', text: modifiedLogstashContent
                }
            }
        }
        stage('List Files') {
            steps {
                dir('nexus') {
                    bat 'dir'
                }
            }
        }
        stage('Deploy Applications in Kubernetes') {
            environment {
                NEXUS_CREDENTIALS = credentials('nexus-user-credentials')
            }
            steps {
                script {
                    bat "kubectl --kubeconfig=C:/Users/LEHAR/.kube/config apply -f nexus/elastic-playbook.yaml"
                    bat "kubectl --kubeconfig=C:/Users/LEHAR/.kube/config apply -f nexus/filebeat-playbook.yaml"
                    bat "kubectl --kubeconfig=C:/Users/LEHAR/.kube/config apply -f nexus/logstash-playbook.yaml"
                }
            }
        }
    }
}

// pipeline {
//     agent any
//     environment {
//         imageName = "newbuild"
//         imageTag = "1.0.${env.BUILD_NUMBER}"
//         nexusUrl = "192.168.1.41:8082"
//         nexusRepository = "docker-hosted"
//         nexusrepourl = "http://192.168.1.41:8082/repository/docker-hosted/"
//     }

//     stages {
//         stage('Get Code') {
//             steps {
//                 git branch: 'main', url: 'https://github.com/Lehar1107/nexus_jenkins_docker_springboot.git'
//             }
//         }
//         stage('Build') {
//             steps {
//                 bat 'mvn clean install -DskipTests=true'
//             }
//         }
//         stage('Build Docker Image') {
//             steps {
//                 script {
//                     def dockerfile = """
//                         FROM openjdk:17-jdk
//                         COPY target/springboot-docker-nexus-0.0.1-SNAPSHOT.jar /app/my-spring-boot-app.jar
//                         WORKDIR /app
//                         ENTRYPOINT ["java", "-jar", "my-spring-boot-app.jar"]
//                     """
//                     writeFile file: 'Dockerfile', text: dockerfile
//                     bat "docker build -t ${imageName}:${imageTag} ."
//                     bat "docker image ls ${imageName}:${imageTag}"
//                 }
//             }
//         }
//         stage('Push docker image to Nexus') {
//             environment {
//                 NEXUS_CREDENTIALS = credentials('nexus-user-credentials')
//             }
//             steps {
//                 script {
//                     def dockerImage = "${imageName}:${imageTag}"
// 					def nexusImage = "${nexusUrl}/${nexusRepository}/${imageName}:${imageTag}"
// 					//def nexusUsername = NEXUS_CREDENTIALS?.username
// 					//def nexusPassword = NEXUS_CREDENTIALS?.password
					
// 					//echo "Nexus Username: ${nexusUsername}"
// 					//echo "Nexus Password: ${nexusPassword}"
					
// 					withCredentials([usernamePassword(credentialsId: 'nexus-user-credentials', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
//                         withEnv(["DOCKER_LOGIN=\${NEXUS_USERNAME}", "DOCKER_PASSWORD=\${NEXUS_PASSWORD}"]) {
//                             // echo "DOCKER_USERNAME: ${env.NEXUS_USERNAME}"
//                             // echo "DOCKER_PASSWORD: ${env.NEXUS_PASSWORD}"
//                             // sh 'docker login -u ${env.NEXUS_USERNAME} -p ${env.NEXUS_PASSWORD} ${nexusUrl}'
//                             bat "docker login -u $NEXUS_USERNAME -p $NEXUS_PASSWORD $nexusrepourl"
//                             bat "docker tag ${dockerImage} ${nexusImage}"
//                             bat "docker push ${nexusImage}"
//                             bat "docker logout $nexusrepourl"
//                         }
//                     }
//                 }
//             }
//         }
// 	    stage('Prepare YAML') {
//             steps {
//                 script {
//                     def yamlContent = readFile('nexus/new.yaml')
//                     def modifiedContent = yamlContent.replaceAll('\\$\\{BUILD_NUMBER\\}', env.BUILD_NUMBER)
//                     writeFile file: 'nexus/new.yaml', text: modifiedContent
//                 }
//             }
//         }
	    
//         stage('List Files') {
//             steps {
//                 dir('nexus') {
//                     bat 'dir'
//                 }
//             }
//         }

//         stage('Deploy Application in Kubernetes') {
// 		    environment {
//                 NEXUS_CREDENTIALS = credentials('nexus-user-credentials')
//             }
//             steps {
//                 script {
					
//                     bat "kubectl --kubeconfig=C:/Users/LEHAR/.kube/config apply -f nexus/new.yaml"
//                 }
//             }
//         }	
// 	    // stage('Push pod Image to Nexus') {
//         //     steps {
//         //         script {
//         //             def dockerImage = "${imageName}:${imageTag}"
// 		// 			def nexusImage = "${nexusUrl}/${nexusRepository}/${imageName}:${imageTag}"
// 		// 			//def nexusUsername = NEXUS_CREDENTIALS?.username
// 		// 			//def nexusPassword = NEXUS_CREDENTIALS?.password
					
// 		// 			//echo "Nexus Username: ${nexusUsername}"
// 		// 			//echo "Nexus Password: ${nexusPassword}"
					
// 		// 			withCredentials([usernamePassword(credentialsId: 'nexus-user-credentials', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
//         //                 withEnv(["DOCKER_LOGIN=\${NEXUS_USERNAME}", "DOCKER_PASSWORD=\${NEXUS_PASSWORD}"]) {
//         //                     // echo "DOCKER_USERNAME: ${env.NEXUS_USERNAME}"
//         //                     // echo "DOCKER_PASSWORD: ${env.NEXUS_PASSWORD}"
//         //                     // sh 'docker login -u ${env.NEXUS_USERNAME} -p ${env.NEXUS_PASSWORD} ${nexusUrl}'
//         //                     bat "docker login -u $NEXUS_USERNAME -p $NEXUS_PASSWORD $nexusrepourl"
//         //                     bat "docker tag ${dockerImage} ${nexusImage}"
//         //                     bat "docker push ${nexusImage}"
//         //                     bat "docker logout $nexusrepourl"
//         //                 }
//         //             }
//         //         }
//         //     }
//         // }        
//     }
// }
